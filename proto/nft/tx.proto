syntax = "proto3";
package cudosnode.cudosnode.nft;

import "gogoproto/gogo.proto";

option go_package = "cudos.org/cudos-node/x/nft/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the NFT Msg service.
service Msg {
    // IssueDenom defines a method for issue a denom.
    rpc IssueDenom(MsgIssueDenom) returns (MsgIssueDenomResponse);

    // MintNFT defines a method for mint a new nft
    rpc MintNFT(MsgMintNFT) returns (MsgMintNFTResponse);

    // EditNFT defines a method for editing a nft.
    rpc EditNFT(MsgEditNFT) returns (MsgEditNFTResponse);

    // TransferNft transfers ownership of the token to recipient account.
    rpc TransferNft(MsgTransferNft) returns (MsgTransferNftResponse);

    // SendNft transfers ownership of the token to recipient account.
    rpc SendNft(MsgSendNft) returns (MsgSendNftResponse);

    // Approve grants permission to spender to transfer or send the given token.
    rpc ApproveNft(MsgApproveNft) returns (MsgApproveNftResponse);

    // Revokes permission to spender to transfer or send the given token.
      rpc RevokeNft(MsgRevokeNft) returns (MsgRevokeNftResponse);

    // BurnNFT defines a method for burning a nft.
    rpc BurnNFT(MsgBurnNFT) returns (MsgBurnNFTResponse);
}

// MsgIssueDenom defines an SDK message for creating a new denom.
message MsgIssueDenom {
    option (gogoproto.equal) = true;

    string id = 1;
    string name = 2;
    string schema = 3;
    string sender = 4;
}

// MsgIssueDenomResponse defines the Msg/IssueDenom response type.
message MsgIssueDenomResponse {}

// MsgTransferNft defines an SDK message for transferring an NFT to recipient.
message MsgTransferNft {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
    string recipient = 4;
}

// MsgTransferNftResponse defines the Msg/TransferNft response type.
message MsgTransferNftResponse {}

// MsgSendNft defines an SDK message for transferring an NFT to recipient.
message MsgSendNft {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
    string recipient = 4;
    string message = 5;
}

// MsgSendNftResponse defines the Msg/SendNft response type.
message MsgSendNftResponse {}

// MsgApproveNft defines an SDK message for granted approval.
message MsgApproveNft {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
    string expires = 4;
    string spender = 5;
}

// MsgApproveNft defines the Msg/Approve response type.
message MsgApproveNftResponse {}

// MsgRevokeNft defines an SDK message for transferring an NFT to recipient.
message MsgRevokeNft {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
}

// MsgRevokeNftResponse defines the Msg/RevokeNft response type.
message MsgRevokeNftResponse {}

// MsgEditNFT defines an SDK message for editing a nft.
message MsgEditNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
}

// MsgEditNFTResponse defines the Msg/EditNFT response type.
message MsgEditNFTResponse {}

// MsgMintNFT defines an SDK message for creating a new NFT.
message MsgMintNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string name = 3;
    string uri = 4 [ (gogoproto.customname) = "URI" ];
    string data = 5;
    string sender = 6;
    string recipient = 7;
}

// MsgMintNFTResponse defines the Msg/MintNFT response type.
message MsgMintNFTResponse {}

// MsgBurnNFT defines an SDK message for burning a NFT.
message MsgBurnNFT {
    option (gogoproto.equal) = true;

    string id = 1;
    string denom_id = 2 [ (gogoproto.moretags) = "yaml:\"denom_id\"" ];
    string sender = 3;
}

// MsgBurnNFTResponse defines the Msg/BurnNFT response type.
message MsgBurnNFTResponse {}